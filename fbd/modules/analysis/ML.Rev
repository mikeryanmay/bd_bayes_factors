# create the model
my_model = model(psi)

# create the monitors
monitors[++mni] = mnScreen(printgen=1000)

# perform the stepping-stone analysis
if ( power == 0 | power == 999 ) {
	write(0.0, "\n", filename=ofn + "/ml.txt")
	write(0.0, filename=ofn + "/ml.txt", append=true)
	q()
}

my_mcmc = adaptivePowerPosterior(my_model, moves, monitors, ofn + "/powp.out", tol=1e-5, sampleFreq=2, likelihoodHeat=power)
my_mcmc.run(50000, burnin=1000, tuningInterval=50)

# compute the marginal likelihood
ss = steppingStoneSampler(file=ofn + "/powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss_ml = ss.marginal() 
ss_ml
write(ss_ml, "\n", filename=ofn + "/ml.txt")

ps = pathSampler(file=ofn + "/powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ps_ml = ps.marginal() 
ps_ml
write(ps_ml, filename=ofn + "/ml.txt", append=true)

# exit
q()
