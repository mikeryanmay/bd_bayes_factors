# specify the stem age
max_age = 0
for(i in 1:taxa.size()) {
    if( taxa[i].getMaxAge() > max_age ) {
        max_age = taxa[i].getMaxAge()
    }
}

stem_age ~ dnUniform(max_age, 419.2)
moves[++mvi] = mvSlide(stem_age, weight=10)
stem_age.setValue(tree.rootAge() + 1.0)

# specify the sampling fraction
rho <- 27.0 / 111.0

# diversification rates
div_prior = dnLognormal(ln(0.1), H)
for(i in 1:(num_bins + 1)) {

    # speciation rate
    speciation_rate[i] ~ div_prior
    moves[++mvi] = mvScale(speciation_rate[i], weight=5)
    
    # extinction rates
    extinction_rate[i] ~ div_prior
    moves[++mvi] = mvScale(extinction_rate[i], weight=5)

}

# fossilization rates
const_prob <- 0.99995
proportional_fossilization_rate_dist = dnDirichlet([1,1,1])
proportional_fossilization_rates ~ dnReversibleJumpMixture( simplex(1,1,1), proportional_fossilization_rate_dist, const_prob)
moves[++mvi] = mvBetaSimplex(proportional_fossilization_rates, weight=20)
moves[++mvi] = mvRJSwitch(proportional_fossilization_rates, weight=100)

relative_fossilization_rates := abs(3.0 * proportional_fossilization_rates)

phi_prior = dnLognormal(ln(0.005), abs(H))

base_fossilization_rate ~ phi_prior
moves[++mvi] = mvScale(base_fossilization_rate, weight=5)

fossilization_rate[1] := abs(base_fossilization_rate * relative_fossilization_rates[1])
fossilization_rate[2] := abs(base_fossilization_rate * relative_fossilization_rates[2])
fossilization_rate[3] := abs(base_fossilization_rate * relative_fossilization_rates[3])
fossilization_rate[4] := abs(base_fossilization_rate * relative_fossilization_rates[1])
fossilization_rate[5] := abs(base_fossilization_rate * relative_fossilization_rates[1])

foss_rate_multiplier := relative_fossilization_rates[2] / relative_fossilization_rates[1]
is_variable := ifelse(foss_rate_multiplier == 1, 0, 1)

# track some rates
net_div_rates := speciation_rate - extinction_rate

# joint proposals
moves[++mvi] = mvUpDownScale(weight=2)
moves[mvi].addVariable(speciation_rate[1], up=true)
moves[mvi].addVariable(extinction_rate[1], up=true)
# moves[mvi].addVariable(fossilization_rate[1], up=false)
